Index: include/google/protobuf/stubs/common.h
===================================================================
--- include/google/protobuf/stubs/common.h	(revision 2313)
+++ include/google/protobuf/stubs/common.h	(working copy)
@@ -1068,21 +1068,24 @@
   GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Mutex);
 };
 
-// MutexLock(mu) acquires mu when constructed and releases it when destroyed.
-class LIBPROTOBUF_EXPORT MutexLock {
+// dahaili@yunrang.com:
+// rename the MutexLock to PbMutexLock to avoid the macro defined in base/mutex.h
+// to unfold the constructor
+// PbMutexLock(mu) acquires mu when constructed and releases it when destroyed.
+class LIBPROTOBUF_EXPORT PbMutexLock {
  public:
-  explicit MutexLock(Mutex *mu) : mu_(mu) { this->mu_->Lock(); }
-  ~MutexLock() { this->mu_->Unlock(); }
+  explicit PbMutexLock(Mutex *mu) : mu_(mu) { this->mu_->Lock(); }
+  ~PbMutexLock() { this->mu_->Unlock(); }
  private:
   Mutex *const mu_;
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MutexLock);
+  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PbMutexLock);
 };
 
 // TODO(kenton):  Implement these?  Hard to implement portably.
-typedef MutexLock ReaderMutexLock;
-typedef MutexLock WriterMutexLock;
+typedef PbMutexLock ReaderMutexLock;
+typedef PbMutexLock WriterMutexLock;
 
-// MutexLockMaybe is like MutexLock, but is a no-op when mu is NULL.
+// MutexLockMaybe is like PbMutexLock, but is a no-op when mu is NULL.
 class LIBPROTOBUF_EXPORT MutexLockMaybe {
  public:
   explicit MutexLockMaybe(Mutex *mu) :
@@ -1098,7 +1101,7 @@
 // We made these internal so that they would show up as such in the docs,
 // but we don't want to stick "internal::" in front of them everywhere.
 using internal::Mutex;
-using internal::MutexLock;
+using internal::PbMutexLock;
 using internal::ReaderMutexLock;
 using internal::WriterMutexLock;
 using internal::MutexLockMaybe;
