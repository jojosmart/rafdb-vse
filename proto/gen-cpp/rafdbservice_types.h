/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef rafdbservice_TYPES_H
#define rafdbservice_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "accord_types.h"


namespace rafdb {

typedef struct _Pair__isset {
  _Pair__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _Pair__isset;

class Pair {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Pair() : key(""), value("") {
  }

  virtual ~Pair() throw() {}

  std::string key;
  std::string value;

  _Pair__isset __isset;

  bool operator == (const Pair & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Pair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
