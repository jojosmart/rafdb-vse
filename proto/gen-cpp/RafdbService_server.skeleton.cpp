// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RafdbService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace rafdb;

class RafdbServiceHandler : virtual public RafdbServiceIf {
 public:
  RafdbServiceHandler() {
    // Your initialization goes here
  }

  void VseClientVersion(std::string& _return) {
    // Your implementation goes here
    printf("VseClientVersion\n");
  }

  void ClientEnumAllDbs(ResDbnameList& _return) {
    // Your implementation goes here
    printf("ClientEnumAllDbs\n");
  }

  void ClientCreateDbV2(ErrInfoThr& _return, const std::string& dbname, const std::string& fields) {
    // Your implementation goes here
    printf("ClientCreateDbV2\n");
  }

  void ClientDeleteDb(ErrInfoThr& _return, const std::string& dbname) {
    // Your implementation goes here
    printf("ClientDeleteDb\n");
  }

  void ClientGetDbRecordCount(ResIntInfo& _return, const std::string& dbname) {
    // Your implementation goes here
    printf("ClientGetDbRecordCount\n");
  }

  void ClientPushRecordV2(ResIntInfo& _return, const std::string& dbname, const std::string& fields, const std::string& values) {
    // Your implementation goes here
    printf("ClientPushRecordV2\n");
  }

  void ClientRetrieveRecordsV2(RetriveRecords& _return, const std::string& dbname, const std::string& fields, const std::string& wherestmt, const double min_sim, const int64_t max_rec) {
    // Your implementation goes here
    printf("ClientRetrieveRecordsV2\n");
  }

  void ClientDeleteRecord(ErrInfoThr& _return, const std::string& dbname, const int64_t index) {
    // Your implementation goes here
    printf("ClientDeleteRecord\n");
  }

  void ClientDeleteRecordWs(ErrInfoThr& _return, const std::string& dbname, const std::string& wherestmt) {
    // Your implementation goes here
    printf("ClientDeleteRecordWs\n");
  }

  void ClientDbScanRepair(ResIntInfo& _return, const std::string& dbname) {
    // Your implementation goes here
    printf("ClientDbScanRepair\n");
  }

  void ClientEnumDbColumns(ResIntInfo& _return, const std::string& dbname) {
    // Your implementation goes here
    printf("ClientEnumDbColumns\n");
  }

  bool IsHealthy() {
    // Your implementation goes here
    printf("IsHealthy\n");
  }

  bool IsLeader() {
    // Your implementation goes here
    printf("IsLeader\n");
  }

  int32_t GetLeaderId() {
    // Your implementation goes here
    printf("GetLeaderId\n");
  }

  void GetCluserIPList(std::string& _return) {
    // Your implementation goes here
    printf("GetCluserIPList\n");
  }

  void SendVote(const rafdb::Message& message) {
    // Your implementation goes here
    printf("SendVote\n");
  }

  void ReplyVote(const rafdb::Message& message) {
    // Your implementation goes here
    printf("ReplyVote\n");
  }

  void SendHeartBeat(const rafdb::Message& message) {
    // Your implementation goes here
    printf("SendHeartBeat\n");
  }

  void ReplyHeartBeat(const rafdb::Message& message) {
    // Your implementation goes here
    printf("ReplyHeartBeat\n");
  }

  void QueryLeaderId(const rafdb::Message& message) {
    // Your implementation goes here
    printf("QueryLeaderId\n");
  }

  void ReplyLeaderId(const rafdb::Message& message) {
    // Your implementation goes here
    printf("ReplyLeaderId\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<RafdbServiceHandler> handler(new RafdbServiceHandler());
  shared_ptr<TProcessor> processor(new RafdbServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

