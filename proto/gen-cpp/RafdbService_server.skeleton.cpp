// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RafdbService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace rafdb;

class RafdbServiceHandler : virtual public RafdbServiceIf {
 public:
  RafdbServiceHandler() {
    // Your initialization goes here
  }

  bool Set(const std::string& dbname, const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("Set\n");
  }

  bool MPSet(const std::string& dbname, const std::vector<Pair> & pairs) {
    // Your implementation goes here
    printf("MPSet\n");
  }

  void Get(std::string& _return, const std::string& dbname, const std::string& key) {
    // Your implementation goes here
    printf("Get\n");
  }

  void MGet(std::vector<std::string> & _return, const std::string& dbname, const std::vector<std::string> & keys) {
    // Your implementation goes here
    printf("MGet\n");
  }

  bool Delete(const std::string& dbname, const std::string& key) {
    // Your implementation goes here
    printf("Delete\n");
  }

  bool MDelete(const std::string& dbname, const std::vector<std::string> & keys) {
    // Your implementation goes here
    printf("MDelete\n");
  }

  int32_t OpenIterator(const std::string& dbname) {
    // Your implementation goes here
    printf("OpenIterator\n");
  }

  bool CloseIterator(const int32_t itID) {
    // Your implementation goes here
    printf("CloseIterator\n");
  }

  bool SeekToFirst(const int32_t itID) {
    // Your implementation goes here
    printf("SeekToFirst\n");
  }

  bool SeekToLast(const int32_t itID) {
    // Your implementation goes here
    printf("SeekToLast\n");
  }

  bool Valid(const int32_t itID) {
    // Your implementation goes here
    printf("Valid\n");
  }

  bool Seek(const int32_t itID, const std::string& target) {
    // Your implementation goes here
    printf("Seek\n");
  }

  void NextKeys(std::vector<std::string> & _return, const int32_t itID, const int32_t number) {
    // Your implementation goes here
    printf("NextKeys\n");
  }

  void NextValues(std::vector<std::string> & _return, const int32_t itID, const int32_t number) {
    // Your implementation goes here
    printf("NextValues\n");
  }

  void NextPairs(std::vector<Pair> & _return, const int32_t itID, const int32_t number) {
    // Your implementation goes here
    printf("NextPairs\n");
  }

  bool DeleteDatabase(const std::string& dbname) {
    // Your implementation goes here
    printf("DeleteDatabase\n");
  }

  bool LSet(const std::string& dbname, const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("LSet\n");
  }

  bool IsHealthy() {
    // Your implementation goes here
    printf("IsHealthy\n");
  }

  bool IsLeader() {
    // Your implementation goes here
    printf("IsLeader\n");
  }

  int32_t GetLeaderId() {
    // Your implementation goes here
    printf("GetLeaderId\n");
  }

  void SendVote(const rafdb::Message& message) {
    // Your implementation goes here
    printf("SendVote\n");
  }

  void ReplyVote(const rafdb::Message& message) {
    // Your implementation goes here
    printf("ReplyVote\n");
  }

  void SendHeartBeat(const rafdb::Message& message) {
    // Your implementation goes here
    printf("SendHeartBeat\n");
  }

  void ReplyHeartBeat(const rafdb::Message& message) {
    // Your implementation goes here
    printf("ReplyHeartBeat\n");
  }

  void QueryLeaderId(const rafdb::Message& message) {
    // Your implementation goes here
    printf("QueryLeaderId\n");
  }

  void ReplyLeaderId(const rafdb::Message& message) {
    // Your implementation goes here
    printf("ReplyLeaderId\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<RafdbServiceHandler> handler(new RafdbServiceHandler());
  shared_ptr<TProcessor> processor(new RafdbServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

