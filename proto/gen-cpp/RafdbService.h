/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef RafdbService_H
#define RafdbService_H

#include <TProcessor.h>
#include "rafdbservice_types.h"

namespace rafdb {

class RafdbServiceIf {
 public:
  virtual ~RafdbServiceIf() {}
  virtual bool Set(const std::string& dbname, const std::string& key, const std::string& value) = 0;
  virtual bool MPSet(const std::string& dbname, const std::vector<Pair> & pairs) = 0;
  virtual void Get(std::string& _return, const std::string& dbname, const std::string& key) = 0;
  virtual void MGet(std::vector<std::string> & _return, const std::string& dbname, const std::vector<std::string> & keys) = 0;
  virtual bool Delete(const std::string& dbname, const std::string& key) = 0;
  virtual bool MDelete(const std::string& dbname, const std::vector<std::string> & keys) = 0;
  virtual int32_t OpenIterator(const std::string& dbname) = 0;
  virtual bool CloseIterator(const int32_t itID) = 0;
  virtual bool SeekToFirst(const int32_t itID) = 0;
  virtual bool SeekToLast(const int32_t itID) = 0;
  virtual bool Valid(const int32_t itID) = 0;
  virtual bool Seek(const int32_t itID, const std::string& target) = 0;
  virtual void NextKeys(std::vector<std::string> & _return, const int32_t itID, const int32_t number) = 0;
  virtual void NextValues(std::vector<std::string> & _return, const int32_t itID, const int32_t number) = 0;
  virtual void NextPairs(std::vector<Pair> & _return, const int32_t itID, const int32_t number) = 0;
  virtual bool DeleteDatabase(const std::string& dbname) = 0;
  virtual bool LSet(const std::string& dbname, const std::string& key, const std::string& value) = 0;
  virtual bool IsHealthy() = 0;
  virtual bool IsLeader() = 0;
  virtual int32_t GetLeaderId() = 0;
  virtual void SendVote(const rafdb::Message& message) = 0;
  virtual void ReplyVote(const rafdb::Message& message) = 0;
  virtual void SendHeartBeat(const rafdb::Message& message) = 0;
  virtual void ReplyHeartBeat(const rafdb::Message& message) = 0;
  virtual void QueryLeaderId(const rafdb::Message& message) = 0;
  virtual void ReplyLeaderId(const rafdb::Message& message) = 0;
};

class RafdbServiceNull : virtual public RafdbServiceIf {
 public:
  virtual ~RafdbServiceNull() {}
  bool Set(const std::string& /* dbname */, const std::string& /* key */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  bool MPSet(const std::string& /* dbname */, const std::vector<Pair> & /* pairs */) {
    bool _return = false;
    return _return;
  }
  void Get(std::string& /* _return */, const std::string& /* dbname */, const std::string& /* key */) {
    return;
  }
  void MGet(std::vector<std::string> & /* _return */, const std::string& /* dbname */, const std::vector<std::string> & /* keys */) {
    return;
  }
  bool Delete(const std::string& /* dbname */, const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  bool MDelete(const std::string& /* dbname */, const std::vector<std::string> & /* keys */) {
    bool _return = false;
    return _return;
  }
  int32_t OpenIterator(const std::string& /* dbname */) {
    int32_t _return = 0;
    return _return;
  }
  bool CloseIterator(const int32_t /* itID */) {
    bool _return = false;
    return _return;
  }
  bool SeekToFirst(const int32_t /* itID */) {
    bool _return = false;
    return _return;
  }
  bool SeekToLast(const int32_t /* itID */) {
    bool _return = false;
    return _return;
  }
  bool Valid(const int32_t /* itID */) {
    bool _return = false;
    return _return;
  }
  bool Seek(const int32_t /* itID */, const std::string& /* target */) {
    bool _return = false;
    return _return;
  }
  void NextKeys(std::vector<std::string> & /* _return */, const int32_t /* itID */, const int32_t /* number */) {
    return;
  }
  void NextValues(std::vector<std::string> & /* _return */, const int32_t /* itID */, const int32_t /* number */) {
    return;
  }
  void NextPairs(std::vector<Pair> & /* _return */, const int32_t /* itID */, const int32_t /* number */) {
    return;
  }
  bool DeleteDatabase(const std::string& /* dbname */) {
    bool _return = false;
    return _return;
  }
  bool LSet(const std::string& /* dbname */, const std::string& /* key */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  bool IsHealthy() {
    bool _return = false;
    return _return;
  }
  bool IsLeader() {
    bool _return = false;
    return _return;
  }
  int32_t GetLeaderId() {
    int32_t _return = 0;
    return _return;
  }
  void SendVote(const rafdb::Message& /* message */) {
    return;
  }
  void ReplyVote(const rafdb::Message& /* message */) {
    return;
  }
  void SendHeartBeat(const rafdb::Message& /* message */) {
    return;
  }
  void ReplyHeartBeat(const rafdb::Message& /* message */) {
    return;
  }
  void QueryLeaderId(const rafdb::Message& /* message */) {
    return;
  }
  void ReplyLeaderId(const rafdb::Message& /* message */) {
    return;
  }
};

typedef struct _RafdbService_Set_args__isset {
  _RafdbService_Set_args__isset() : dbname(false), key(false), value(false) {}
  bool dbname;
  bool key;
  bool value;
} _RafdbService_Set_args__isset;

class RafdbService_Set_args {
 public:

  RafdbService_Set_args() : dbname(""), key(""), value("") {
  }

  virtual ~RafdbService_Set_args() throw() {}

  std::string dbname;
  std::string key;
  std::string value;

  _RafdbService_Set_args__isset __isset;

  bool operator == (const RafdbService_Set_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_Set_pargs {
 public:


  virtual ~RafdbService_Set_pargs() throw() {}

  const std::string* dbname;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Set_result__isset {
  _RafdbService_Set_result__isset() : success(false) {}
  bool success;
} _RafdbService_Set_result__isset;

class RafdbService_Set_result {
 public:

  RafdbService_Set_result() : success(0) {
  }

  virtual ~RafdbService_Set_result() throw() {}

  bool success;

  _RafdbService_Set_result__isset __isset;

  bool operator == (const RafdbService_Set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Set_presult__isset {
  _RafdbService_Set_presult__isset() : success(false) {}
  bool success;
} _RafdbService_Set_presult__isset;

class RafdbService_Set_presult {
 public:


  virtual ~RafdbService_Set_presult() throw() {}

  bool* success;

  _RafdbService_Set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_MPSet_args__isset {
  _RafdbService_MPSet_args__isset() : dbname(false), pairs(false) {}
  bool dbname;
  bool pairs;
} _RafdbService_MPSet_args__isset;

class RafdbService_MPSet_args {
 public:

  RafdbService_MPSet_args() : dbname("") {
  }

  virtual ~RafdbService_MPSet_args() throw() {}

  std::string dbname;
  std::vector<Pair>  pairs;

  _RafdbService_MPSet_args__isset __isset;

  bool operator == (const RafdbService_MPSet_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(pairs == rhs.pairs))
      return false;
    return true;
  }
  bool operator != (const RafdbService_MPSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_MPSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_MPSet_pargs {
 public:


  virtual ~RafdbService_MPSet_pargs() throw() {}

  const std::string* dbname;
  const std::vector<Pair> * pairs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_MPSet_result__isset {
  _RafdbService_MPSet_result__isset() : success(false) {}
  bool success;
} _RafdbService_MPSet_result__isset;

class RafdbService_MPSet_result {
 public:

  RafdbService_MPSet_result() : success(0) {
  }

  virtual ~RafdbService_MPSet_result() throw() {}

  bool success;

  _RafdbService_MPSet_result__isset __isset;

  bool operator == (const RafdbService_MPSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_MPSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_MPSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_MPSet_presult__isset {
  _RafdbService_MPSet_presult__isset() : success(false) {}
  bool success;
} _RafdbService_MPSet_presult__isset;

class RafdbService_MPSet_presult {
 public:


  virtual ~RafdbService_MPSet_presult() throw() {}

  bool* success;

  _RafdbService_MPSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_Get_args__isset {
  _RafdbService_Get_args__isset() : dbname(false), key(false) {}
  bool dbname;
  bool key;
} _RafdbService_Get_args__isset;

class RafdbService_Get_args {
 public:

  RafdbService_Get_args() : dbname(""), key("") {
  }

  virtual ~RafdbService_Get_args() throw() {}

  std::string dbname;
  std::string key;

  _RafdbService_Get_args__isset __isset;

  bool operator == (const RafdbService_Get_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_Get_pargs {
 public:


  virtual ~RafdbService_Get_pargs() throw() {}

  const std::string* dbname;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Get_result__isset {
  _RafdbService_Get_result__isset() : success(false) {}
  bool success;
} _RafdbService_Get_result__isset;

class RafdbService_Get_result {
 public:

  RafdbService_Get_result() : success("") {
  }

  virtual ~RafdbService_Get_result() throw() {}

  std::string success;

  _RafdbService_Get_result__isset __isset;

  bool operator == (const RafdbService_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Get_presult__isset {
  _RafdbService_Get_presult__isset() : success(false) {}
  bool success;
} _RafdbService_Get_presult__isset;

class RafdbService_Get_presult {
 public:


  virtual ~RafdbService_Get_presult() throw() {}

  std::string* success;

  _RafdbService_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_MGet_args__isset {
  _RafdbService_MGet_args__isset() : dbname(false), keys(false) {}
  bool dbname;
  bool keys;
} _RafdbService_MGet_args__isset;

class RafdbService_MGet_args {
 public:

  RafdbService_MGet_args() : dbname("") {
  }

  virtual ~RafdbService_MGet_args() throw() {}

  std::string dbname;
  std::vector<std::string>  keys;

  _RafdbService_MGet_args__isset __isset;

  bool operator == (const RafdbService_MGet_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const RafdbService_MGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_MGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_MGet_pargs {
 public:


  virtual ~RafdbService_MGet_pargs() throw() {}

  const std::string* dbname;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_MGet_result__isset {
  _RafdbService_MGet_result__isset() : success(false) {}
  bool success;
} _RafdbService_MGet_result__isset;

class RafdbService_MGet_result {
 public:

  RafdbService_MGet_result() {
  }

  virtual ~RafdbService_MGet_result() throw() {}

  std::vector<std::string>  success;

  _RafdbService_MGet_result__isset __isset;

  bool operator == (const RafdbService_MGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_MGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_MGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_MGet_presult__isset {
  _RafdbService_MGet_presult__isset() : success(false) {}
  bool success;
} _RafdbService_MGet_presult__isset;

class RafdbService_MGet_presult {
 public:


  virtual ~RafdbService_MGet_presult() throw() {}

  std::vector<std::string> * success;

  _RafdbService_MGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_Delete_args__isset {
  _RafdbService_Delete_args__isset() : dbname(false), key(false) {}
  bool dbname;
  bool key;
} _RafdbService_Delete_args__isset;

class RafdbService_Delete_args {
 public:

  RafdbService_Delete_args() : dbname(""), key("") {
  }

  virtual ~RafdbService_Delete_args() throw() {}

  std::string dbname;
  std::string key;

  _RafdbService_Delete_args__isset __isset;

  bool operator == (const RafdbService_Delete_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_Delete_pargs {
 public:


  virtual ~RafdbService_Delete_pargs() throw() {}

  const std::string* dbname;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Delete_result__isset {
  _RafdbService_Delete_result__isset() : success(false) {}
  bool success;
} _RafdbService_Delete_result__isset;

class RafdbService_Delete_result {
 public:

  RafdbService_Delete_result() : success(0) {
  }

  virtual ~RafdbService_Delete_result() throw() {}

  bool success;

  _RafdbService_Delete_result__isset __isset;

  bool operator == (const RafdbService_Delete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Delete_presult__isset {
  _RafdbService_Delete_presult__isset() : success(false) {}
  bool success;
} _RafdbService_Delete_presult__isset;

class RafdbService_Delete_presult {
 public:


  virtual ~RafdbService_Delete_presult() throw() {}

  bool* success;

  _RafdbService_Delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_MDelete_args__isset {
  _RafdbService_MDelete_args__isset() : dbname(false), keys(false) {}
  bool dbname;
  bool keys;
} _RafdbService_MDelete_args__isset;

class RafdbService_MDelete_args {
 public:

  RafdbService_MDelete_args() : dbname("") {
  }

  virtual ~RafdbService_MDelete_args() throw() {}

  std::string dbname;
  std::vector<std::string>  keys;

  _RafdbService_MDelete_args__isset __isset;

  bool operator == (const RafdbService_MDelete_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const RafdbService_MDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_MDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_MDelete_pargs {
 public:


  virtual ~RafdbService_MDelete_pargs() throw() {}

  const std::string* dbname;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_MDelete_result__isset {
  _RafdbService_MDelete_result__isset() : success(false) {}
  bool success;
} _RafdbService_MDelete_result__isset;

class RafdbService_MDelete_result {
 public:

  RafdbService_MDelete_result() : success(0) {
  }

  virtual ~RafdbService_MDelete_result() throw() {}

  bool success;

  _RafdbService_MDelete_result__isset __isset;

  bool operator == (const RafdbService_MDelete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_MDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_MDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_MDelete_presult__isset {
  _RafdbService_MDelete_presult__isset() : success(false) {}
  bool success;
} _RafdbService_MDelete_presult__isset;

class RafdbService_MDelete_presult {
 public:


  virtual ~RafdbService_MDelete_presult() throw() {}

  bool* success;

  _RafdbService_MDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_OpenIterator_args__isset {
  _RafdbService_OpenIterator_args__isset() : dbname(false) {}
  bool dbname;
} _RafdbService_OpenIterator_args__isset;

class RafdbService_OpenIterator_args {
 public:

  RafdbService_OpenIterator_args() : dbname("") {
  }

  virtual ~RafdbService_OpenIterator_args() throw() {}

  std::string dbname;

  _RafdbService_OpenIterator_args__isset __isset;

  bool operator == (const RafdbService_OpenIterator_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const RafdbService_OpenIterator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_OpenIterator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_OpenIterator_pargs {
 public:


  virtual ~RafdbService_OpenIterator_pargs() throw() {}

  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_OpenIterator_result__isset {
  _RafdbService_OpenIterator_result__isset() : success(false) {}
  bool success;
} _RafdbService_OpenIterator_result__isset;

class RafdbService_OpenIterator_result {
 public:

  RafdbService_OpenIterator_result() : success(0) {
  }

  virtual ~RafdbService_OpenIterator_result() throw() {}

  int32_t success;

  _RafdbService_OpenIterator_result__isset __isset;

  bool operator == (const RafdbService_OpenIterator_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_OpenIterator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_OpenIterator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_OpenIterator_presult__isset {
  _RafdbService_OpenIterator_presult__isset() : success(false) {}
  bool success;
} _RafdbService_OpenIterator_presult__isset;

class RafdbService_OpenIterator_presult {
 public:


  virtual ~RafdbService_OpenIterator_presult() throw() {}

  int32_t* success;

  _RafdbService_OpenIterator_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_CloseIterator_args__isset {
  _RafdbService_CloseIterator_args__isset() : itID(false) {}
  bool itID;
} _RafdbService_CloseIterator_args__isset;

class RafdbService_CloseIterator_args {
 public:

  RafdbService_CloseIterator_args() : itID(0) {
  }

  virtual ~RafdbService_CloseIterator_args() throw() {}

  int32_t itID;

  _RafdbService_CloseIterator_args__isset __isset;

  bool operator == (const RafdbService_CloseIterator_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    return true;
  }
  bool operator != (const RafdbService_CloseIterator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_CloseIterator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_CloseIterator_pargs {
 public:


  virtual ~RafdbService_CloseIterator_pargs() throw() {}

  const int32_t* itID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_CloseIterator_result__isset {
  _RafdbService_CloseIterator_result__isset() : success(false) {}
  bool success;
} _RafdbService_CloseIterator_result__isset;

class RafdbService_CloseIterator_result {
 public:

  RafdbService_CloseIterator_result() : success(0) {
  }

  virtual ~RafdbService_CloseIterator_result() throw() {}

  bool success;

  _RafdbService_CloseIterator_result__isset __isset;

  bool operator == (const RafdbService_CloseIterator_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_CloseIterator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_CloseIterator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_CloseIterator_presult__isset {
  _RafdbService_CloseIterator_presult__isset() : success(false) {}
  bool success;
} _RafdbService_CloseIterator_presult__isset;

class RafdbService_CloseIterator_presult {
 public:


  virtual ~RafdbService_CloseIterator_presult() throw() {}

  bool* success;

  _RafdbService_CloseIterator_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_SeekToFirst_args__isset {
  _RafdbService_SeekToFirst_args__isset() : itID(false) {}
  bool itID;
} _RafdbService_SeekToFirst_args__isset;

class RafdbService_SeekToFirst_args {
 public:

  RafdbService_SeekToFirst_args() : itID(0) {
  }

  virtual ~RafdbService_SeekToFirst_args() throw() {}

  int32_t itID;

  _RafdbService_SeekToFirst_args__isset __isset;

  bool operator == (const RafdbService_SeekToFirst_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SeekToFirst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SeekToFirst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_SeekToFirst_pargs {
 public:


  virtual ~RafdbService_SeekToFirst_pargs() throw() {}

  const int32_t* itID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_SeekToFirst_result__isset {
  _RafdbService_SeekToFirst_result__isset() : success(false) {}
  bool success;
} _RafdbService_SeekToFirst_result__isset;

class RafdbService_SeekToFirst_result {
 public:

  RafdbService_SeekToFirst_result() : success(0) {
  }

  virtual ~RafdbService_SeekToFirst_result() throw() {}

  bool success;

  _RafdbService_SeekToFirst_result__isset __isset;

  bool operator == (const RafdbService_SeekToFirst_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SeekToFirst_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SeekToFirst_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_SeekToFirst_presult__isset {
  _RafdbService_SeekToFirst_presult__isset() : success(false) {}
  bool success;
} _RafdbService_SeekToFirst_presult__isset;

class RafdbService_SeekToFirst_presult {
 public:


  virtual ~RafdbService_SeekToFirst_presult() throw() {}

  bool* success;

  _RafdbService_SeekToFirst_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_SeekToLast_args__isset {
  _RafdbService_SeekToLast_args__isset() : itID(false) {}
  bool itID;
} _RafdbService_SeekToLast_args__isset;

class RafdbService_SeekToLast_args {
 public:

  RafdbService_SeekToLast_args() : itID(0) {
  }

  virtual ~RafdbService_SeekToLast_args() throw() {}

  int32_t itID;

  _RafdbService_SeekToLast_args__isset __isset;

  bool operator == (const RafdbService_SeekToLast_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SeekToLast_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SeekToLast_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_SeekToLast_pargs {
 public:


  virtual ~RafdbService_SeekToLast_pargs() throw() {}

  const int32_t* itID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_SeekToLast_result__isset {
  _RafdbService_SeekToLast_result__isset() : success(false) {}
  bool success;
} _RafdbService_SeekToLast_result__isset;

class RafdbService_SeekToLast_result {
 public:

  RafdbService_SeekToLast_result() : success(0) {
  }

  virtual ~RafdbService_SeekToLast_result() throw() {}

  bool success;

  _RafdbService_SeekToLast_result__isset __isset;

  bool operator == (const RafdbService_SeekToLast_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SeekToLast_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SeekToLast_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_SeekToLast_presult__isset {
  _RafdbService_SeekToLast_presult__isset() : success(false) {}
  bool success;
} _RafdbService_SeekToLast_presult__isset;

class RafdbService_SeekToLast_presult {
 public:


  virtual ~RafdbService_SeekToLast_presult() throw() {}

  bool* success;

  _RafdbService_SeekToLast_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_Valid_args__isset {
  _RafdbService_Valid_args__isset() : itID(false) {}
  bool itID;
} _RafdbService_Valid_args__isset;

class RafdbService_Valid_args {
 public:

  RafdbService_Valid_args() : itID(0) {
  }

  virtual ~RafdbService_Valid_args() throw() {}

  int32_t itID;

  _RafdbService_Valid_args__isset __isset;

  bool operator == (const RafdbService_Valid_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Valid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Valid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_Valid_pargs {
 public:


  virtual ~RafdbService_Valid_pargs() throw() {}

  const int32_t* itID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Valid_result__isset {
  _RafdbService_Valid_result__isset() : success(false) {}
  bool success;
} _RafdbService_Valid_result__isset;

class RafdbService_Valid_result {
 public:

  RafdbService_Valid_result() : success(0) {
  }

  virtual ~RafdbService_Valid_result() throw() {}

  bool success;

  _RafdbService_Valid_result__isset __isset;

  bool operator == (const RafdbService_Valid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Valid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Valid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Valid_presult__isset {
  _RafdbService_Valid_presult__isset() : success(false) {}
  bool success;
} _RafdbService_Valid_presult__isset;

class RafdbService_Valid_presult {
 public:


  virtual ~RafdbService_Valid_presult() throw() {}

  bool* success;

  _RafdbService_Valid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_Seek_args__isset {
  _RafdbService_Seek_args__isset() : itID(false), target(false) {}
  bool itID;
  bool target;
} _RafdbService_Seek_args__isset;

class RafdbService_Seek_args {
 public:

  RafdbService_Seek_args() : itID(0), target("") {
  }

  virtual ~RafdbService_Seek_args() throw() {}

  int32_t itID;
  std::string target;

  _RafdbService_Seek_args__isset __isset;

  bool operator == (const RafdbService_Seek_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Seek_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Seek_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_Seek_pargs {
 public:


  virtual ~RafdbService_Seek_pargs() throw() {}

  const int32_t* itID;
  const std::string* target;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Seek_result__isset {
  _RafdbService_Seek_result__isset() : success(false) {}
  bool success;
} _RafdbService_Seek_result__isset;

class RafdbService_Seek_result {
 public:

  RafdbService_Seek_result() : success(0) {
  }

  virtual ~RafdbService_Seek_result() throw() {}

  bool success;

  _RafdbService_Seek_result__isset __isset;

  bool operator == (const RafdbService_Seek_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_Seek_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_Seek_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_Seek_presult__isset {
  _RafdbService_Seek_presult__isset() : success(false) {}
  bool success;
} _RafdbService_Seek_presult__isset;

class RafdbService_Seek_presult {
 public:


  virtual ~RafdbService_Seek_presult() throw() {}

  bool* success;

  _RafdbService_Seek_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_NextKeys_args__isset {
  _RafdbService_NextKeys_args__isset() : itID(false), number(false) {}
  bool itID;
  bool number;
} _RafdbService_NextKeys_args__isset;

class RafdbService_NextKeys_args {
 public:

  RafdbService_NextKeys_args() : itID(0), number(0) {
  }

  virtual ~RafdbService_NextKeys_args() throw() {}

  int32_t itID;
  int32_t number;

  _RafdbService_NextKeys_args__isset __isset;

  bool operator == (const RafdbService_NextKeys_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const RafdbService_NextKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_NextKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_NextKeys_pargs {
 public:


  virtual ~RafdbService_NextKeys_pargs() throw() {}

  const int32_t* itID;
  const int32_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_NextKeys_result__isset {
  _RafdbService_NextKeys_result__isset() : success(false) {}
  bool success;
} _RafdbService_NextKeys_result__isset;

class RafdbService_NextKeys_result {
 public:

  RafdbService_NextKeys_result() {
  }

  virtual ~RafdbService_NextKeys_result() throw() {}

  std::vector<std::string>  success;

  _RafdbService_NextKeys_result__isset __isset;

  bool operator == (const RafdbService_NextKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_NextKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_NextKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_NextKeys_presult__isset {
  _RafdbService_NextKeys_presult__isset() : success(false) {}
  bool success;
} _RafdbService_NextKeys_presult__isset;

class RafdbService_NextKeys_presult {
 public:


  virtual ~RafdbService_NextKeys_presult() throw() {}

  std::vector<std::string> * success;

  _RafdbService_NextKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_NextValues_args__isset {
  _RafdbService_NextValues_args__isset() : itID(false), number(false) {}
  bool itID;
  bool number;
} _RafdbService_NextValues_args__isset;

class RafdbService_NextValues_args {
 public:

  RafdbService_NextValues_args() : itID(0), number(0) {
  }

  virtual ~RafdbService_NextValues_args() throw() {}

  int32_t itID;
  int32_t number;

  _RafdbService_NextValues_args__isset __isset;

  bool operator == (const RafdbService_NextValues_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const RafdbService_NextValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_NextValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_NextValues_pargs {
 public:


  virtual ~RafdbService_NextValues_pargs() throw() {}

  const int32_t* itID;
  const int32_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_NextValues_result__isset {
  _RafdbService_NextValues_result__isset() : success(false) {}
  bool success;
} _RafdbService_NextValues_result__isset;

class RafdbService_NextValues_result {
 public:

  RafdbService_NextValues_result() {
  }

  virtual ~RafdbService_NextValues_result() throw() {}

  std::vector<std::string>  success;

  _RafdbService_NextValues_result__isset __isset;

  bool operator == (const RafdbService_NextValues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_NextValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_NextValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_NextValues_presult__isset {
  _RafdbService_NextValues_presult__isset() : success(false) {}
  bool success;
} _RafdbService_NextValues_presult__isset;

class RafdbService_NextValues_presult {
 public:


  virtual ~RafdbService_NextValues_presult() throw() {}

  std::vector<std::string> * success;

  _RafdbService_NextValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_NextPairs_args__isset {
  _RafdbService_NextPairs_args__isset() : itID(false), number(false) {}
  bool itID;
  bool number;
} _RafdbService_NextPairs_args__isset;

class RafdbService_NextPairs_args {
 public:

  RafdbService_NextPairs_args() : itID(0), number(0) {
  }

  virtual ~RafdbService_NextPairs_args() throw() {}

  int32_t itID;
  int32_t number;

  _RafdbService_NextPairs_args__isset __isset;

  bool operator == (const RafdbService_NextPairs_args & rhs) const
  {
    if (!(itID == rhs.itID))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const RafdbService_NextPairs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_NextPairs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_NextPairs_pargs {
 public:


  virtual ~RafdbService_NextPairs_pargs() throw() {}

  const int32_t* itID;
  const int32_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_NextPairs_result__isset {
  _RafdbService_NextPairs_result__isset() : success(false) {}
  bool success;
} _RafdbService_NextPairs_result__isset;

class RafdbService_NextPairs_result {
 public:

  RafdbService_NextPairs_result() {
  }

  virtual ~RafdbService_NextPairs_result() throw() {}

  std::vector<Pair>  success;

  _RafdbService_NextPairs_result__isset __isset;

  bool operator == (const RafdbService_NextPairs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_NextPairs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_NextPairs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_NextPairs_presult__isset {
  _RafdbService_NextPairs_presult__isset() : success(false) {}
  bool success;
} _RafdbService_NextPairs_presult__isset;

class RafdbService_NextPairs_presult {
 public:


  virtual ~RafdbService_NextPairs_presult() throw() {}

  std::vector<Pair> * success;

  _RafdbService_NextPairs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_DeleteDatabase_args__isset {
  _RafdbService_DeleteDatabase_args__isset() : dbname(false) {}
  bool dbname;
} _RafdbService_DeleteDatabase_args__isset;

class RafdbService_DeleteDatabase_args {
 public:

  RafdbService_DeleteDatabase_args() : dbname("") {
  }

  virtual ~RafdbService_DeleteDatabase_args() throw() {}

  std::string dbname;

  _RafdbService_DeleteDatabase_args__isset __isset;

  bool operator == (const RafdbService_DeleteDatabase_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const RafdbService_DeleteDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_DeleteDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_DeleteDatabase_pargs {
 public:


  virtual ~RafdbService_DeleteDatabase_pargs() throw() {}

  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_DeleteDatabase_result__isset {
  _RafdbService_DeleteDatabase_result__isset() : success(false) {}
  bool success;
} _RafdbService_DeleteDatabase_result__isset;

class RafdbService_DeleteDatabase_result {
 public:

  RafdbService_DeleteDatabase_result() : success(0) {
  }

  virtual ~RafdbService_DeleteDatabase_result() throw() {}

  bool success;

  _RafdbService_DeleteDatabase_result__isset __isset;

  bool operator == (const RafdbService_DeleteDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_DeleteDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_DeleteDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_DeleteDatabase_presult__isset {
  _RafdbService_DeleteDatabase_presult__isset() : success(false) {}
  bool success;
} _RafdbService_DeleteDatabase_presult__isset;

class RafdbService_DeleteDatabase_presult {
 public:


  virtual ~RafdbService_DeleteDatabase_presult() throw() {}

  bool* success;

  _RafdbService_DeleteDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_LSet_args__isset {
  _RafdbService_LSet_args__isset() : dbname(false), key(false), value(false) {}
  bool dbname;
  bool key;
  bool value;
} _RafdbService_LSet_args__isset;

class RafdbService_LSet_args {
 public:

  RafdbService_LSet_args() : dbname(""), key(""), value("") {
  }

  virtual ~RafdbService_LSet_args() throw() {}

  std::string dbname;
  std::string key;
  std::string value;

  _RafdbService_LSet_args__isset __isset;

  bool operator == (const RafdbService_LSet_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const RafdbService_LSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_LSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_LSet_pargs {
 public:


  virtual ~RafdbService_LSet_pargs() throw() {}

  const std::string* dbname;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_LSet_result__isset {
  _RafdbService_LSet_result__isset() : success(false) {}
  bool success;
} _RafdbService_LSet_result__isset;

class RafdbService_LSet_result {
 public:

  RafdbService_LSet_result() : success(0) {
  }

  virtual ~RafdbService_LSet_result() throw() {}

  bool success;

  _RafdbService_LSet_result__isset __isset;

  bool operator == (const RafdbService_LSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_LSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_LSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_LSet_presult__isset {
  _RafdbService_LSet_presult__isset() : success(false) {}
  bool success;
} _RafdbService_LSet_presult__isset;

class RafdbService_LSet_presult {
 public:


  virtual ~RafdbService_LSet_presult() throw() {}

  bool* success;

  _RafdbService_LSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_IsHealthy_args {
 public:

  RafdbService_IsHealthy_args() {
  }

  virtual ~RafdbService_IsHealthy_args() throw() {}


  bool operator == (const RafdbService_IsHealthy_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_IsHealthy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsHealthy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_IsHealthy_pargs {
 public:


  virtual ~RafdbService_IsHealthy_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsHealthy_result__isset {
  _RafdbService_IsHealthy_result__isset() : success(false) {}
  bool success;
} _RafdbService_IsHealthy_result__isset;

class RafdbService_IsHealthy_result {
 public:

  RafdbService_IsHealthy_result() : success(0) {
  }

  virtual ~RafdbService_IsHealthy_result() throw() {}

  bool success;

  _RafdbService_IsHealthy_result__isset __isset;

  bool operator == (const RafdbService_IsHealthy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_IsHealthy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsHealthy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsHealthy_presult__isset {
  _RafdbService_IsHealthy_presult__isset() : success(false) {}
  bool success;
} _RafdbService_IsHealthy_presult__isset;

class RafdbService_IsHealthy_presult {
 public:


  virtual ~RafdbService_IsHealthy_presult() throw() {}

  bool* success;

  _RafdbService_IsHealthy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_IsLeader_args {
 public:

  RafdbService_IsLeader_args() {
  }

  virtual ~RafdbService_IsLeader_args() throw() {}


  bool operator == (const RafdbService_IsLeader_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_IsLeader_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsLeader_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_IsLeader_pargs {
 public:


  virtual ~RafdbService_IsLeader_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsLeader_result__isset {
  _RafdbService_IsLeader_result__isset() : success(false) {}
  bool success;
} _RafdbService_IsLeader_result__isset;

class RafdbService_IsLeader_result {
 public:

  RafdbService_IsLeader_result() : success(0) {
  }

  virtual ~RafdbService_IsLeader_result() throw() {}

  bool success;

  _RafdbService_IsLeader_result__isset __isset;

  bool operator == (const RafdbService_IsLeader_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_IsLeader_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsLeader_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsLeader_presult__isset {
  _RafdbService_IsLeader_presult__isset() : success(false) {}
  bool success;
} _RafdbService_IsLeader_presult__isset;

class RafdbService_IsLeader_presult {
 public:


  virtual ~RafdbService_IsLeader_presult() throw() {}

  bool* success;

  _RafdbService_IsLeader_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_GetLeaderId_args {
 public:

  RafdbService_GetLeaderId_args() {
  }

  virtual ~RafdbService_GetLeaderId_args() throw() {}


  bool operator == (const RafdbService_GetLeaderId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_GetLeaderId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_GetLeaderId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_GetLeaderId_pargs {
 public:


  virtual ~RafdbService_GetLeaderId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_GetLeaderId_result__isset {
  _RafdbService_GetLeaderId_result__isset() : success(false) {}
  bool success;
} _RafdbService_GetLeaderId_result__isset;

class RafdbService_GetLeaderId_result {
 public:

  RafdbService_GetLeaderId_result() : success(0) {
  }

  virtual ~RafdbService_GetLeaderId_result() throw() {}

  int32_t success;

  _RafdbService_GetLeaderId_result__isset __isset;

  bool operator == (const RafdbService_GetLeaderId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_GetLeaderId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_GetLeaderId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_GetLeaderId_presult__isset {
  _RafdbService_GetLeaderId_presult__isset() : success(false) {}
  bool success;
} _RafdbService_GetLeaderId_presult__isset;

class RafdbService_GetLeaderId_presult {
 public:


  virtual ~RafdbService_GetLeaderId_presult() throw() {}

  int32_t* success;

  _RafdbService_GetLeaderId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_SendVote_args__isset {
  _RafdbService_SendVote_args__isset() : message(false) {}
  bool message;
} _RafdbService_SendVote_args__isset;

class RafdbService_SendVote_args {
 public:

  RafdbService_SendVote_args() {
  }

  virtual ~RafdbService_SendVote_args() throw() {}

  rafdb::Message message;

  _RafdbService_SendVote_args__isset __isset;

  bool operator == (const RafdbService_SendVote_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SendVote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SendVote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_SendVote_pargs {
 public:


  virtual ~RafdbService_SendVote_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ReplyVote_args__isset {
  _RafdbService_ReplyVote_args__isset() : message(false) {}
  bool message;
} _RafdbService_ReplyVote_args__isset;

class RafdbService_ReplyVote_args {
 public:

  RafdbService_ReplyVote_args() {
  }

  virtual ~RafdbService_ReplyVote_args() throw() {}

  rafdb::Message message;

  _RafdbService_ReplyVote_args__isset __isset;

  bool operator == (const RafdbService_ReplyVote_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ReplyVote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ReplyVote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ReplyVote_pargs {
 public:


  virtual ~RafdbService_ReplyVote_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_SendHeartBeat_args__isset {
  _RafdbService_SendHeartBeat_args__isset() : message(false) {}
  bool message;
} _RafdbService_SendHeartBeat_args__isset;

class RafdbService_SendHeartBeat_args {
 public:

  RafdbService_SendHeartBeat_args() {
  }

  virtual ~RafdbService_SendHeartBeat_args() throw() {}

  rafdb::Message message;

  _RafdbService_SendHeartBeat_args__isset __isset;

  bool operator == (const RafdbService_SendHeartBeat_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SendHeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SendHeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_SendHeartBeat_pargs {
 public:


  virtual ~RafdbService_SendHeartBeat_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ReplyHeartBeat_args__isset {
  _RafdbService_ReplyHeartBeat_args__isset() : message(false) {}
  bool message;
} _RafdbService_ReplyHeartBeat_args__isset;

class RafdbService_ReplyHeartBeat_args {
 public:

  RafdbService_ReplyHeartBeat_args() {
  }

  virtual ~RafdbService_ReplyHeartBeat_args() throw() {}

  rafdb::Message message;

  _RafdbService_ReplyHeartBeat_args__isset __isset;

  bool operator == (const RafdbService_ReplyHeartBeat_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ReplyHeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ReplyHeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ReplyHeartBeat_pargs {
 public:


  virtual ~RafdbService_ReplyHeartBeat_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_QueryLeaderId_args__isset {
  _RafdbService_QueryLeaderId_args__isset() : message(false) {}
  bool message;
} _RafdbService_QueryLeaderId_args__isset;

class RafdbService_QueryLeaderId_args {
 public:

  RafdbService_QueryLeaderId_args() {
  }

  virtual ~RafdbService_QueryLeaderId_args() throw() {}

  rafdb::Message message;

  _RafdbService_QueryLeaderId_args__isset __isset;

  bool operator == (const RafdbService_QueryLeaderId_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_QueryLeaderId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_QueryLeaderId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_QueryLeaderId_pargs {
 public:


  virtual ~RafdbService_QueryLeaderId_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ReplyLeaderId_args__isset {
  _RafdbService_ReplyLeaderId_args__isset() : message(false) {}
  bool message;
} _RafdbService_ReplyLeaderId_args__isset;

class RafdbService_ReplyLeaderId_args {
 public:

  RafdbService_ReplyLeaderId_args() {
  }

  virtual ~RafdbService_ReplyLeaderId_args() throw() {}

  rafdb::Message message;

  _RafdbService_ReplyLeaderId_args__isset __isset;

  bool operator == (const RafdbService_ReplyLeaderId_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ReplyLeaderId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ReplyLeaderId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ReplyLeaderId_pargs {
 public:


  virtual ~RafdbService_ReplyLeaderId_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class RafdbServiceClient : virtual public RafdbServiceIf {
 public:
  RafdbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RafdbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Set(const std::string& dbname, const std::string& key, const std::string& value);
  void send_Set(const std::string& dbname, const std::string& key, const std::string& value);
  bool recv_Set();
  bool MPSet(const std::string& dbname, const std::vector<Pair> & pairs);
  void send_MPSet(const std::string& dbname, const std::vector<Pair> & pairs);
  bool recv_MPSet();
  void Get(std::string& _return, const std::string& dbname, const std::string& key);
  void send_Get(const std::string& dbname, const std::string& key);
  void recv_Get(std::string& _return);
  void MGet(std::vector<std::string> & _return, const std::string& dbname, const std::vector<std::string> & keys);
  void send_MGet(const std::string& dbname, const std::vector<std::string> & keys);
  void recv_MGet(std::vector<std::string> & _return);
  bool Delete(const std::string& dbname, const std::string& key);
  void send_Delete(const std::string& dbname, const std::string& key);
  bool recv_Delete();
  bool MDelete(const std::string& dbname, const std::vector<std::string> & keys);
  void send_MDelete(const std::string& dbname, const std::vector<std::string> & keys);
  bool recv_MDelete();
  int32_t OpenIterator(const std::string& dbname);
  void send_OpenIterator(const std::string& dbname);
  int32_t recv_OpenIterator();
  bool CloseIterator(const int32_t itID);
  void send_CloseIterator(const int32_t itID);
  bool recv_CloseIterator();
  bool SeekToFirst(const int32_t itID);
  void send_SeekToFirst(const int32_t itID);
  bool recv_SeekToFirst();
  bool SeekToLast(const int32_t itID);
  void send_SeekToLast(const int32_t itID);
  bool recv_SeekToLast();
  bool Valid(const int32_t itID);
  void send_Valid(const int32_t itID);
  bool recv_Valid();
  bool Seek(const int32_t itID, const std::string& target);
  void send_Seek(const int32_t itID, const std::string& target);
  bool recv_Seek();
  void NextKeys(std::vector<std::string> & _return, const int32_t itID, const int32_t number);
  void send_NextKeys(const int32_t itID, const int32_t number);
  void recv_NextKeys(std::vector<std::string> & _return);
  void NextValues(std::vector<std::string> & _return, const int32_t itID, const int32_t number);
  void send_NextValues(const int32_t itID, const int32_t number);
  void recv_NextValues(std::vector<std::string> & _return);
  void NextPairs(std::vector<Pair> & _return, const int32_t itID, const int32_t number);
  void send_NextPairs(const int32_t itID, const int32_t number);
  void recv_NextPairs(std::vector<Pair> & _return);
  bool DeleteDatabase(const std::string& dbname);
  void send_DeleteDatabase(const std::string& dbname);
  bool recv_DeleteDatabase();
  bool LSet(const std::string& dbname, const std::string& key, const std::string& value);
  void send_LSet(const std::string& dbname, const std::string& key, const std::string& value);
  bool recv_LSet();
  bool IsHealthy();
  void send_IsHealthy();
  bool recv_IsHealthy();
  bool IsLeader();
  void send_IsLeader();
  bool recv_IsLeader();
  int32_t GetLeaderId();
  void send_GetLeaderId();
  int32_t recv_GetLeaderId();
  void SendVote(const rafdb::Message& message);
  void send_SendVote(const rafdb::Message& message);
  void ReplyVote(const rafdb::Message& message);
  void send_ReplyVote(const rafdb::Message& message);
  void SendHeartBeat(const rafdb::Message& message);
  void send_SendHeartBeat(const rafdb::Message& message);
  void ReplyHeartBeat(const rafdb::Message& message);
  void send_ReplyHeartBeat(const rafdb::Message& message);
  void QueryLeaderId(const rafdb::Message& message);
  void send_QueryLeaderId(const rafdb::Message& message);
  void ReplyLeaderId(const rafdb::Message& message);
  void send_ReplyLeaderId(const rafdb::Message& message);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RafdbServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<RafdbServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (RafdbServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_Set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_MPSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_MGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_MDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_OpenIterator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_CloseIterator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_SeekToFirst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_SeekToLast(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Valid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Seek(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_NextKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_NextValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_NextPairs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_DeleteDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_LSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_IsHealthy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_IsLeader(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetLeaderId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_SendVote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ReplyVote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_SendHeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ReplyHeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_QueryLeaderId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ReplyLeaderId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  RafdbServiceProcessor(boost::shared_ptr<RafdbServiceIf> iface) :
    iface_(iface) {
    processMap_["Set"] = &RafdbServiceProcessor::process_Set;
    processMap_["MPSet"] = &RafdbServiceProcessor::process_MPSet;
    processMap_["Get"] = &RafdbServiceProcessor::process_Get;
    processMap_["MGet"] = &RafdbServiceProcessor::process_MGet;
    processMap_["Delete"] = &RafdbServiceProcessor::process_Delete;
    processMap_["MDelete"] = &RafdbServiceProcessor::process_MDelete;
    processMap_["OpenIterator"] = &RafdbServiceProcessor::process_OpenIterator;
    processMap_["CloseIterator"] = &RafdbServiceProcessor::process_CloseIterator;
    processMap_["SeekToFirst"] = &RafdbServiceProcessor::process_SeekToFirst;
    processMap_["SeekToLast"] = &RafdbServiceProcessor::process_SeekToLast;
    processMap_["Valid"] = &RafdbServiceProcessor::process_Valid;
    processMap_["Seek"] = &RafdbServiceProcessor::process_Seek;
    processMap_["NextKeys"] = &RafdbServiceProcessor::process_NextKeys;
    processMap_["NextValues"] = &RafdbServiceProcessor::process_NextValues;
    processMap_["NextPairs"] = &RafdbServiceProcessor::process_NextPairs;
    processMap_["DeleteDatabase"] = &RafdbServiceProcessor::process_DeleteDatabase;
    processMap_["LSet"] = &RafdbServiceProcessor::process_LSet;
    processMap_["IsHealthy"] = &RafdbServiceProcessor::process_IsHealthy;
    processMap_["IsLeader"] = &RafdbServiceProcessor::process_IsLeader;
    processMap_["GetLeaderId"] = &RafdbServiceProcessor::process_GetLeaderId;
    processMap_["SendVote"] = &RafdbServiceProcessor::process_SendVote;
    processMap_["ReplyVote"] = &RafdbServiceProcessor::process_ReplyVote;
    processMap_["SendHeartBeat"] = &RafdbServiceProcessor::process_SendHeartBeat;
    processMap_["ReplyHeartBeat"] = &RafdbServiceProcessor::process_ReplyHeartBeat;
    processMap_["QueryLeaderId"] = &RafdbServiceProcessor::process_QueryLeaderId;
    processMap_["ReplyLeaderId"] = &RafdbServiceProcessor::process_ReplyLeaderId;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~RafdbServiceProcessor() {}
};

class RafdbServiceMultiface : virtual public RafdbServiceIf {
 public:
  RafdbServiceMultiface(std::vector<boost::shared_ptr<RafdbServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RafdbServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RafdbServiceIf> > ifaces_;
  RafdbServiceMultiface() {}
  void add(boost::shared_ptr<RafdbServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool Set(const std::string& dbname, const std::string& key, const std::string& value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Set(dbname, key, value);
      } else {
        ifaces_[i]->Set(dbname, key, value);
      }
    }
  }

  bool MPSet(const std::string& dbname, const std::vector<Pair> & pairs) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->MPSet(dbname, pairs);
      } else {
        ifaces_[i]->MPSet(dbname, pairs);
      }
    }
  }

  void Get(std::string& _return, const std::string& dbname, const std::string& key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Get(_return, dbname, key);
        return;
      } else {
        ifaces_[i]->Get(_return, dbname, key);
      }
    }
  }

  void MGet(std::vector<std::string> & _return, const std::string& dbname, const std::vector<std::string> & keys) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->MGet(_return, dbname, keys);
        return;
      } else {
        ifaces_[i]->MGet(_return, dbname, keys);
      }
    }
  }

  bool Delete(const std::string& dbname, const std::string& key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Delete(dbname, key);
      } else {
        ifaces_[i]->Delete(dbname, key);
      }
    }
  }

  bool MDelete(const std::string& dbname, const std::vector<std::string> & keys) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->MDelete(dbname, keys);
      } else {
        ifaces_[i]->MDelete(dbname, keys);
      }
    }
  }

  int32_t OpenIterator(const std::string& dbname) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->OpenIterator(dbname);
      } else {
        ifaces_[i]->OpenIterator(dbname);
      }
    }
  }

  bool CloseIterator(const int32_t itID) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->CloseIterator(itID);
      } else {
        ifaces_[i]->CloseIterator(itID);
      }
    }
  }

  bool SeekToFirst(const int32_t itID) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SeekToFirst(itID);
      } else {
        ifaces_[i]->SeekToFirst(itID);
      }
    }
  }

  bool SeekToLast(const int32_t itID) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SeekToLast(itID);
      } else {
        ifaces_[i]->SeekToLast(itID);
      }
    }
  }

  bool Valid(const int32_t itID) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Valid(itID);
      } else {
        ifaces_[i]->Valid(itID);
      }
    }
  }

  bool Seek(const int32_t itID, const std::string& target) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Seek(itID, target);
      } else {
        ifaces_[i]->Seek(itID, target);
      }
    }
  }

  void NextKeys(std::vector<std::string> & _return, const int32_t itID, const int32_t number) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->NextKeys(_return, itID, number);
        return;
      } else {
        ifaces_[i]->NextKeys(_return, itID, number);
      }
    }
  }

  void NextValues(std::vector<std::string> & _return, const int32_t itID, const int32_t number) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->NextValues(_return, itID, number);
        return;
      } else {
        ifaces_[i]->NextValues(_return, itID, number);
      }
    }
  }

  void NextPairs(std::vector<Pair> & _return, const int32_t itID, const int32_t number) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->NextPairs(_return, itID, number);
        return;
      } else {
        ifaces_[i]->NextPairs(_return, itID, number);
      }
    }
  }

  bool DeleteDatabase(const std::string& dbname) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->DeleteDatabase(dbname);
      } else {
        ifaces_[i]->DeleteDatabase(dbname);
      }
    }
  }

  bool LSet(const std::string& dbname, const std::string& key, const std::string& value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->LSet(dbname, key, value);
      } else {
        ifaces_[i]->LSet(dbname, key, value);
      }
    }
  }

  bool IsHealthy() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsHealthy();
      } else {
        ifaces_[i]->IsHealthy();
      }
    }
  }

  bool IsLeader() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsLeader();
      } else {
        ifaces_[i]->IsLeader();
      }
    }
  }

  int32_t GetLeaderId() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetLeaderId();
      } else {
        ifaces_[i]->GetLeaderId();
      }
    }
  }

  void SendVote(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->SendVote(message);
    }
  }

  void ReplyVote(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ReplyVote(message);
    }
  }

  void SendHeartBeat(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->SendHeartBeat(message);
    }
  }

  void ReplyHeartBeat(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ReplyHeartBeat(message);
    }
  }

  void QueryLeaderId(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->QueryLeaderId(message);
    }
  }

  void ReplyLeaderId(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ReplyLeaderId(message);
    }
  }

};

} // namespace

#endif
