/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef RafdbService_H
#define RafdbService_H

#include <TProcessor.h>
#include "rafdbservice_types.h"

namespace rafdb {

class RafdbServiceIf {
 public:
  virtual ~RafdbServiceIf() {}
  virtual void VseClientVersion(std::string& _return) = 0;
  virtual void ClientEnumAllDbs(ResDbnameList& _return) = 0;
  virtual void ClientCreateDbV2(ErrInfoThr& _return, const std::string& dbname, const std::string& fields) = 0;
  virtual void ClientDeleteDb(ErrInfoThr& _return, const std::string& dbname) = 0;
  virtual void ClientGetDbRecordCount(ResIntInfo& _return, const std::string& dbname) = 0;
  virtual void ClientPushRecordV2(ResIntInfo& _return, const std::string& dbname, const std::string& fields, const std::string& values) = 0;
  virtual void ClientRetrieveRecordsV2(RetriveRecords& _return, const std::string& dbname, const std::string& fields, const std::string& wherestmt, const double min_sim, const int64_t max_rec) = 0;
  virtual void ClientDeleteRecord(ErrInfoThr& _return, const std::string& dbname, const int64_t index) = 0;
  virtual void ClientDeleteRecordWs(ErrInfoThr& _return, const std::string& dbname, const std::string& wherestmt) = 0;
  virtual void ClientDbScanRepair(ResIntInfo& _return, const std::string& dbname) = 0;
  virtual void ClientEnumDbColumns(ResIntInfo& _return, const std::string& dbname) = 0;
  virtual bool IsHealthy() = 0;
  virtual bool IsLeader() = 0;
  virtual int32_t GetLeaderId() = 0;
  virtual void GetCluserIPList(std::string& _return) = 0;
  virtual void SendVote(const rafdb::Message& message) = 0;
  virtual void ReplyVote(const rafdb::Message& message) = 0;
  virtual void SendHeartBeat(const rafdb::Message& message) = 0;
  virtual void ReplyHeartBeat(const rafdb::Message& message) = 0;
  virtual void QueryLeaderId(const rafdb::Message& message) = 0;
  virtual void ReplyLeaderId(const rafdb::Message& message) = 0;
};

class RafdbServiceNull : virtual public RafdbServiceIf {
 public:
  virtual ~RafdbServiceNull() {}
  void VseClientVersion(std::string& /* _return */) {
    return;
  }
  void ClientEnumAllDbs(ResDbnameList& /* _return */) {
    return;
  }
  void ClientCreateDbV2(ErrInfoThr& /* _return */, const std::string& /* dbname */, const std::string& /* fields */) {
    return;
  }
  void ClientDeleteDb(ErrInfoThr& /* _return */, const std::string& /* dbname */) {
    return;
  }
  void ClientGetDbRecordCount(ResIntInfo& /* _return */, const std::string& /* dbname */) {
    return;
  }
  void ClientPushRecordV2(ResIntInfo& /* _return */, const std::string& /* dbname */, const std::string& /* fields */, const std::string& /* values */) {
    return;
  }
  void ClientRetrieveRecordsV2(RetriveRecords& /* _return */, const std::string& /* dbname */, const std::string& /* fields */, const std::string& /* wherestmt */, const double /* min_sim */, const int64_t /* max_rec */) {
    return;
  }
  void ClientDeleteRecord(ErrInfoThr& /* _return */, const std::string& /* dbname */, const int64_t /* index */) {
    return;
  }
  void ClientDeleteRecordWs(ErrInfoThr& /* _return */, const std::string& /* dbname */, const std::string& /* wherestmt */) {
    return;
  }
  void ClientDbScanRepair(ResIntInfo& /* _return */, const std::string& /* dbname */) {
    return;
  }
  void ClientEnumDbColumns(ResIntInfo& /* _return */, const std::string& /* dbname */) {
    return;
  }
  bool IsHealthy() {
    bool _return = false;
    return _return;
  }
  bool IsLeader() {
    bool _return = false;
    return _return;
  }
  int32_t GetLeaderId() {
    int32_t _return = 0;
    return _return;
  }
  void GetCluserIPList(std::string& /* _return */) {
    return;
  }
  void SendVote(const rafdb::Message& /* message */) {
    return;
  }
  void ReplyVote(const rafdb::Message& /* message */) {
    return;
  }
  void SendHeartBeat(const rafdb::Message& /* message */) {
    return;
  }
  void ReplyHeartBeat(const rafdb::Message& /* message */) {
    return;
  }
  void QueryLeaderId(const rafdb::Message& /* message */) {
    return;
  }
  void ReplyLeaderId(const rafdb::Message& /* message */) {
    return;
  }
};


class RafdbService_VseClientVersion_args {
 public:

  RafdbService_VseClientVersion_args() {
  }

  virtual ~RafdbService_VseClientVersion_args() throw() {}


  bool operator == (const RafdbService_VseClientVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_VseClientVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_VseClientVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_VseClientVersion_pargs {
 public:


  virtual ~RafdbService_VseClientVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_VseClientVersion_result__isset {
  _RafdbService_VseClientVersion_result__isset() : success(false) {}
  bool success;
} _RafdbService_VseClientVersion_result__isset;

class RafdbService_VseClientVersion_result {
 public:

  RafdbService_VseClientVersion_result() : success("") {
  }

  virtual ~RafdbService_VseClientVersion_result() throw() {}

  std::string success;

  _RafdbService_VseClientVersion_result__isset __isset;

  bool operator == (const RafdbService_VseClientVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_VseClientVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_VseClientVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_VseClientVersion_presult__isset {
  _RafdbService_VseClientVersion_presult__isset() : success(false) {}
  bool success;
} _RafdbService_VseClientVersion_presult__isset;

class RafdbService_VseClientVersion_presult {
 public:


  virtual ~RafdbService_VseClientVersion_presult() throw() {}

  std::string* success;

  _RafdbService_VseClientVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_ClientEnumAllDbs_args {
 public:

  RafdbService_ClientEnumAllDbs_args() {
  }

  virtual ~RafdbService_ClientEnumAllDbs_args() throw() {}


  bool operator == (const RafdbService_ClientEnumAllDbs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_ClientEnumAllDbs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientEnumAllDbs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientEnumAllDbs_pargs {
 public:


  virtual ~RafdbService_ClientEnumAllDbs_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientEnumAllDbs_result__isset {
  _RafdbService_ClientEnumAllDbs_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientEnumAllDbs_result__isset;

class RafdbService_ClientEnumAllDbs_result {
 public:

  RafdbService_ClientEnumAllDbs_result() {
  }

  virtual ~RafdbService_ClientEnumAllDbs_result() throw() {}

  ResDbnameList success;

  _RafdbService_ClientEnumAllDbs_result__isset __isset;

  bool operator == (const RafdbService_ClientEnumAllDbs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientEnumAllDbs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientEnumAllDbs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientEnumAllDbs_presult__isset {
  _RafdbService_ClientEnumAllDbs_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientEnumAllDbs_presult__isset;

class RafdbService_ClientEnumAllDbs_presult {
 public:


  virtual ~RafdbService_ClientEnumAllDbs_presult() throw() {}

  ResDbnameList* success;

  _RafdbService_ClientEnumAllDbs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientCreateDbV2_args__isset {
  _RafdbService_ClientCreateDbV2_args__isset() : dbname(false), fields(false) {}
  bool dbname;
  bool fields;
} _RafdbService_ClientCreateDbV2_args__isset;

class RafdbService_ClientCreateDbV2_args {
 public:

  RafdbService_ClientCreateDbV2_args() : dbname(""), fields("") {
  }

  virtual ~RafdbService_ClientCreateDbV2_args() throw() {}

  std::string dbname;
  std::string fields;

  _RafdbService_ClientCreateDbV2_args__isset __isset;

  bool operator == (const RafdbService_ClientCreateDbV2_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientCreateDbV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientCreateDbV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientCreateDbV2_pargs {
 public:


  virtual ~RafdbService_ClientCreateDbV2_pargs() throw() {}

  const std::string* dbname;
  const std::string* fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientCreateDbV2_result__isset {
  _RafdbService_ClientCreateDbV2_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientCreateDbV2_result__isset;

class RafdbService_ClientCreateDbV2_result {
 public:

  RafdbService_ClientCreateDbV2_result() {
  }

  virtual ~RafdbService_ClientCreateDbV2_result() throw() {}

  ErrInfoThr success;

  _RafdbService_ClientCreateDbV2_result__isset __isset;

  bool operator == (const RafdbService_ClientCreateDbV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientCreateDbV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientCreateDbV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientCreateDbV2_presult__isset {
  _RafdbService_ClientCreateDbV2_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientCreateDbV2_presult__isset;

class RafdbService_ClientCreateDbV2_presult {
 public:


  virtual ~RafdbService_ClientCreateDbV2_presult() throw() {}

  ErrInfoThr* success;

  _RafdbService_ClientCreateDbV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientDeleteDb_args__isset {
  _RafdbService_ClientDeleteDb_args__isset() : dbname(false) {}
  bool dbname;
} _RafdbService_ClientDeleteDb_args__isset;

class RafdbService_ClientDeleteDb_args {
 public:

  RafdbService_ClientDeleteDb_args() : dbname("") {
  }

  virtual ~RafdbService_ClientDeleteDb_args() throw() {}

  std::string dbname;

  _RafdbService_ClientDeleteDb_args__isset __isset;

  bool operator == (const RafdbService_ClientDeleteDb_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDeleteDb_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDeleteDb_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientDeleteDb_pargs {
 public:


  virtual ~RafdbService_ClientDeleteDb_pargs() throw() {}

  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDeleteDb_result__isset {
  _RafdbService_ClientDeleteDb_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDeleteDb_result__isset;

class RafdbService_ClientDeleteDb_result {
 public:

  RafdbService_ClientDeleteDb_result() {
  }

  virtual ~RafdbService_ClientDeleteDb_result() throw() {}

  ErrInfoThr success;

  _RafdbService_ClientDeleteDb_result__isset __isset;

  bool operator == (const RafdbService_ClientDeleteDb_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDeleteDb_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDeleteDb_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDeleteDb_presult__isset {
  _RafdbService_ClientDeleteDb_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDeleteDb_presult__isset;

class RafdbService_ClientDeleteDb_presult {
 public:


  virtual ~RafdbService_ClientDeleteDb_presult() throw() {}

  ErrInfoThr* success;

  _RafdbService_ClientDeleteDb_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientGetDbRecordCount_args__isset {
  _RafdbService_ClientGetDbRecordCount_args__isset() : dbname(false) {}
  bool dbname;
} _RafdbService_ClientGetDbRecordCount_args__isset;

class RafdbService_ClientGetDbRecordCount_args {
 public:

  RafdbService_ClientGetDbRecordCount_args() : dbname("") {
  }

  virtual ~RafdbService_ClientGetDbRecordCount_args() throw() {}

  std::string dbname;

  _RafdbService_ClientGetDbRecordCount_args__isset __isset;

  bool operator == (const RafdbService_ClientGetDbRecordCount_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientGetDbRecordCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientGetDbRecordCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientGetDbRecordCount_pargs {
 public:


  virtual ~RafdbService_ClientGetDbRecordCount_pargs() throw() {}

  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientGetDbRecordCount_result__isset {
  _RafdbService_ClientGetDbRecordCount_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientGetDbRecordCount_result__isset;

class RafdbService_ClientGetDbRecordCount_result {
 public:

  RafdbService_ClientGetDbRecordCount_result() {
  }

  virtual ~RafdbService_ClientGetDbRecordCount_result() throw() {}

  ResIntInfo success;

  _RafdbService_ClientGetDbRecordCount_result__isset __isset;

  bool operator == (const RafdbService_ClientGetDbRecordCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientGetDbRecordCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientGetDbRecordCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientGetDbRecordCount_presult__isset {
  _RafdbService_ClientGetDbRecordCount_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientGetDbRecordCount_presult__isset;

class RafdbService_ClientGetDbRecordCount_presult {
 public:


  virtual ~RafdbService_ClientGetDbRecordCount_presult() throw() {}

  ResIntInfo* success;

  _RafdbService_ClientGetDbRecordCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientPushRecordV2_args__isset {
  _RafdbService_ClientPushRecordV2_args__isset() : dbname(false), fields(false), values(false) {}
  bool dbname;
  bool fields;
  bool values;
} _RafdbService_ClientPushRecordV2_args__isset;

class RafdbService_ClientPushRecordV2_args {
 public:

  RafdbService_ClientPushRecordV2_args() : dbname(""), fields(""), values("") {
  }

  virtual ~RafdbService_ClientPushRecordV2_args() throw() {}

  std::string dbname;
  std::string fields;
  std::string values;

  _RafdbService_ClientPushRecordV2_args__isset __isset;

  bool operator == (const RafdbService_ClientPushRecordV2_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(fields == rhs.fields))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientPushRecordV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientPushRecordV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientPushRecordV2_pargs {
 public:


  virtual ~RafdbService_ClientPushRecordV2_pargs() throw() {}

  const std::string* dbname;
  const std::string* fields;
  const std::string* values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientPushRecordV2_result__isset {
  _RafdbService_ClientPushRecordV2_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientPushRecordV2_result__isset;

class RafdbService_ClientPushRecordV2_result {
 public:

  RafdbService_ClientPushRecordV2_result() {
  }

  virtual ~RafdbService_ClientPushRecordV2_result() throw() {}

  ResIntInfo success;

  _RafdbService_ClientPushRecordV2_result__isset __isset;

  bool operator == (const RafdbService_ClientPushRecordV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientPushRecordV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientPushRecordV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientPushRecordV2_presult__isset {
  _RafdbService_ClientPushRecordV2_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientPushRecordV2_presult__isset;

class RafdbService_ClientPushRecordV2_presult {
 public:


  virtual ~RafdbService_ClientPushRecordV2_presult() throw() {}

  ResIntInfo* success;

  _RafdbService_ClientPushRecordV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientRetrieveRecordsV2_args__isset {
  _RafdbService_ClientRetrieveRecordsV2_args__isset() : dbname(false), fields(false), wherestmt(false), min_sim(false), max_rec(false) {}
  bool dbname;
  bool fields;
  bool wherestmt;
  bool min_sim;
  bool max_rec;
} _RafdbService_ClientRetrieveRecordsV2_args__isset;

class RafdbService_ClientRetrieveRecordsV2_args {
 public:

  RafdbService_ClientRetrieveRecordsV2_args() : dbname(""), fields(""), wherestmt(""), min_sim(0), max_rec(0) {
  }

  virtual ~RafdbService_ClientRetrieveRecordsV2_args() throw() {}

  std::string dbname;
  std::string fields;
  std::string wherestmt;
  double min_sim;
  int64_t max_rec;

  _RafdbService_ClientRetrieveRecordsV2_args__isset __isset;

  bool operator == (const RafdbService_ClientRetrieveRecordsV2_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(fields == rhs.fields))
      return false;
    if (!(wherestmt == rhs.wherestmt))
      return false;
    if (!(min_sim == rhs.min_sim))
      return false;
    if (!(max_rec == rhs.max_rec))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientRetrieveRecordsV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientRetrieveRecordsV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientRetrieveRecordsV2_pargs {
 public:


  virtual ~RafdbService_ClientRetrieveRecordsV2_pargs() throw() {}

  const std::string* dbname;
  const std::string* fields;
  const std::string* wherestmt;
  const double* min_sim;
  const int64_t* max_rec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientRetrieveRecordsV2_result__isset {
  _RafdbService_ClientRetrieveRecordsV2_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientRetrieveRecordsV2_result__isset;

class RafdbService_ClientRetrieveRecordsV2_result {
 public:

  RafdbService_ClientRetrieveRecordsV2_result() {
  }

  virtual ~RafdbService_ClientRetrieveRecordsV2_result() throw() {}

  RetriveRecords success;

  _RafdbService_ClientRetrieveRecordsV2_result__isset __isset;

  bool operator == (const RafdbService_ClientRetrieveRecordsV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientRetrieveRecordsV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientRetrieveRecordsV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientRetrieveRecordsV2_presult__isset {
  _RafdbService_ClientRetrieveRecordsV2_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientRetrieveRecordsV2_presult__isset;

class RafdbService_ClientRetrieveRecordsV2_presult {
 public:


  virtual ~RafdbService_ClientRetrieveRecordsV2_presult() throw() {}

  RetriveRecords* success;

  _RafdbService_ClientRetrieveRecordsV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientDeleteRecord_args__isset {
  _RafdbService_ClientDeleteRecord_args__isset() : dbname(false), index(false) {}
  bool dbname;
  bool index;
} _RafdbService_ClientDeleteRecord_args__isset;

class RafdbService_ClientDeleteRecord_args {
 public:

  RafdbService_ClientDeleteRecord_args() : dbname(""), index(0) {
  }

  virtual ~RafdbService_ClientDeleteRecord_args() throw() {}

  std::string dbname;
  int64_t index;

  _RafdbService_ClientDeleteRecord_args__isset __isset;

  bool operator == (const RafdbService_ClientDeleteRecord_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDeleteRecord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDeleteRecord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientDeleteRecord_pargs {
 public:


  virtual ~RafdbService_ClientDeleteRecord_pargs() throw() {}

  const std::string* dbname;
  const int64_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDeleteRecord_result__isset {
  _RafdbService_ClientDeleteRecord_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDeleteRecord_result__isset;

class RafdbService_ClientDeleteRecord_result {
 public:

  RafdbService_ClientDeleteRecord_result() {
  }

  virtual ~RafdbService_ClientDeleteRecord_result() throw() {}

  ErrInfoThr success;

  _RafdbService_ClientDeleteRecord_result__isset __isset;

  bool operator == (const RafdbService_ClientDeleteRecord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDeleteRecord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDeleteRecord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDeleteRecord_presult__isset {
  _RafdbService_ClientDeleteRecord_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDeleteRecord_presult__isset;

class RafdbService_ClientDeleteRecord_presult {
 public:


  virtual ~RafdbService_ClientDeleteRecord_presult() throw() {}

  ErrInfoThr* success;

  _RafdbService_ClientDeleteRecord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientDeleteRecordWs_args__isset {
  _RafdbService_ClientDeleteRecordWs_args__isset() : dbname(false), wherestmt(false) {}
  bool dbname;
  bool wherestmt;
} _RafdbService_ClientDeleteRecordWs_args__isset;

class RafdbService_ClientDeleteRecordWs_args {
 public:

  RafdbService_ClientDeleteRecordWs_args() : dbname(""), wherestmt("") {
  }

  virtual ~RafdbService_ClientDeleteRecordWs_args() throw() {}

  std::string dbname;
  std::string wherestmt;

  _RafdbService_ClientDeleteRecordWs_args__isset __isset;

  bool operator == (const RafdbService_ClientDeleteRecordWs_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(wherestmt == rhs.wherestmt))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDeleteRecordWs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDeleteRecordWs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientDeleteRecordWs_pargs {
 public:


  virtual ~RafdbService_ClientDeleteRecordWs_pargs() throw() {}

  const std::string* dbname;
  const std::string* wherestmt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDeleteRecordWs_result__isset {
  _RafdbService_ClientDeleteRecordWs_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDeleteRecordWs_result__isset;

class RafdbService_ClientDeleteRecordWs_result {
 public:

  RafdbService_ClientDeleteRecordWs_result() {
  }

  virtual ~RafdbService_ClientDeleteRecordWs_result() throw() {}

  ErrInfoThr success;

  _RafdbService_ClientDeleteRecordWs_result__isset __isset;

  bool operator == (const RafdbService_ClientDeleteRecordWs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDeleteRecordWs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDeleteRecordWs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDeleteRecordWs_presult__isset {
  _RafdbService_ClientDeleteRecordWs_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDeleteRecordWs_presult__isset;

class RafdbService_ClientDeleteRecordWs_presult {
 public:


  virtual ~RafdbService_ClientDeleteRecordWs_presult() throw() {}

  ErrInfoThr* success;

  _RafdbService_ClientDeleteRecordWs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientDbScanRepair_args__isset {
  _RafdbService_ClientDbScanRepair_args__isset() : dbname(false) {}
  bool dbname;
} _RafdbService_ClientDbScanRepair_args__isset;

class RafdbService_ClientDbScanRepair_args {
 public:

  RafdbService_ClientDbScanRepair_args() : dbname("") {
  }

  virtual ~RafdbService_ClientDbScanRepair_args() throw() {}

  std::string dbname;

  _RafdbService_ClientDbScanRepair_args__isset __isset;

  bool operator == (const RafdbService_ClientDbScanRepair_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDbScanRepair_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDbScanRepair_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientDbScanRepair_pargs {
 public:


  virtual ~RafdbService_ClientDbScanRepair_pargs() throw() {}

  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDbScanRepair_result__isset {
  _RafdbService_ClientDbScanRepair_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDbScanRepair_result__isset;

class RafdbService_ClientDbScanRepair_result {
 public:

  RafdbService_ClientDbScanRepair_result() {
  }

  virtual ~RafdbService_ClientDbScanRepair_result() throw() {}

  ResIntInfo success;

  _RafdbService_ClientDbScanRepair_result__isset __isset;

  bool operator == (const RafdbService_ClientDbScanRepair_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientDbScanRepair_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientDbScanRepair_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientDbScanRepair_presult__isset {
  _RafdbService_ClientDbScanRepair_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientDbScanRepair_presult__isset;

class RafdbService_ClientDbScanRepair_presult {
 public:


  virtual ~RafdbService_ClientDbScanRepair_presult() throw() {}

  ResIntInfo* success;

  _RafdbService_ClientDbScanRepair_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_ClientEnumDbColumns_args__isset {
  _RafdbService_ClientEnumDbColumns_args__isset() : dbname(false) {}
  bool dbname;
} _RafdbService_ClientEnumDbColumns_args__isset;

class RafdbService_ClientEnumDbColumns_args {
 public:

  RafdbService_ClientEnumDbColumns_args() : dbname("") {
  }

  virtual ~RafdbService_ClientEnumDbColumns_args() throw() {}

  std::string dbname;

  _RafdbService_ClientEnumDbColumns_args__isset __isset;

  bool operator == (const RafdbService_ClientEnumDbColumns_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientEnumDbColumns_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientEnumDbColumns_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ClientEnumDbColumns_pargs {
 public:


  virtual ~RafdbService_ClientEnumDbColumns_pargs() throw() {}

  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientEnumDbColumns_result__isset {
  _RafdbService_ClientEnumDbColumns_result__isset() : success(false) {}
  bool success;
} _RafdbService_ClientEnumDbColumns_result__isset;

class RafdbService_ClientEnumDbColumns_result {
 public:

  RafdbService_ClientEnumDbColumns_result() {
  }

  virtual ~RafdbService_ClientEnumDbColumns_result() throw() {}

  ResIntInfo success;

  _RafdbService_ClientEnumDbColumns_result__isset __isset;

  bool operator == (const RafdbService_ClientEnumDbColumns_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ClientEnumDbColumns_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ClientEnumDbColumns_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ClientEnumDbColumns_presult__isset {
  _RafdbService_ClientEnumDbColumns_presult__isset() : success(false) {}
  bool success;
} _RafdbService_ClientEnumDbColumns_presult__isset;

class RafdbService_ClientEnumDbColumns_presult {
 public:


  virtual ~RafdbService_ClientEnumDbColumns_presult() throw() {}

  ResIntInfo* success;

  _RafdbService_ClientEnumDbColumns_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_IsHealthy_args {
 public:

  RafdbService_IsHealthy_args() {
  }

  virtual ~RafdbService_IsHealthy_args() throw() {}


  bool operator == (const RafdbService_IsHealthy_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_IsHealthy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsHealthy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_IsHealthy_pargs {
 public:


  virtual ~RafdbService_IsHealthy_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsHealthy_result__isset {
  _RafdbService_IsHealthy_result__isset() : success(false) {}
  bool success;
} _RafdbService_IsHealthy_result__isset;

class RafdbService_IsHealthy_result {
 public:

  RafdbService_IsHealthy_result() : success(0) {
  }

  virtual ~RafdbService_IsHealthy_result() throw() {}

  bool success;

  _RafdbService_IsHealthy_result__isset __isset;

  bool operator == (const RafdbService_IsHealthy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_IsHealthy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsHealthy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsHealthy_presult__isset {
  _RafdbService_IsHealthy_presult__isset() : success(false) {}
  bool success;
} _RafdbService_IsHealthy_presult__isset;

class RafdbService_IsHealthy_presult {
 public:


  virtual ~RafdbService_IsHealthy_presult() throw() {}

  bool* success;

  _RafdbService_IsHealthy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_IsLeader_args {
 public:

  RafdbService_IsLeader_args() {
  }

  virtual ~RafdbService_IsLeader_args() throw() {}


  bool operator == (const RafdbService_IsLeader_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_IsLeader_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsLeader_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_IsLeader_pargs {
 public:


  virtual ~RafdbService_IsLeader_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsLeader_result__isset {
  _RafdbService_IsLeader_result__isset() : success(false) {}
  bool success;
} _RafdbService_IsLeader_result__isset;

class RafdbService_IsLeader_result {
 public:

  RafdbService_IsLeader_result() : success(0) {
  }

  virtual ~RafdbService_IsLeader_result() throw() {}

  bool success;

  _RafdbService_IsLeader_result__isset __isset;

  bool operator == (const RafdbService_IsLeader_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_IsLeader_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_IsLeader_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_IsLeader_presult__isset {
  _RafdbService_IsLeader_presult__isset() : success(false) {}
  bool success;
} _RafdbService_IsLeader_presult__isset;

class RafdbService_IsLeader_presult {
 public:


  virtual ~RafdbService_IsLeader_presult() throw() {}

  bool* success;

  _RafdbService_IsLeader_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_GetLeaderId_args {
 public:

  RafdbService_GetLeaderId_args() {
  }

  virtual ~RafdbService_GetLeaderId_args() throw() {}


  bool operator == (const RafdbService_GetLeaderId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_GetLeaderId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_GetLeaderId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_GetLeaderId_pargs {
 public:


  virtual ~RafdbService_GetLeaderId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_GetLeaderId_result__isset {
  _RafdbService_GetLeaderId_result__isset() : success(false) {}
  bool success;
} _RafdbService_GetLeaderId_result__isset;

class RafdbService_GetLeaderId_result {
 public:

  RafdbService_GetLeaderId_result() : success(0) {
  }

  virtual ~RafdbService_GetLeaderId_result() throw() {}

  int32_t success;

  _RafdbService_GetLeaderId_result__isset __isset;

  bool operator == (const RafdbService_GetLeaderId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_GetLeaderId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_GetLeaderId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_GetLeaderId_presult__isset {
  _RafdbService_GetLeaderId_presult__isset() : success(false) {}
  bool success;
} _RafdbService_GetLeaderId_presult__isset;

class RafdbService_GetLeaderId_presult {
 public:


  virtual ~RafdbService_GetLeaderId_presult() throw() {}

  int32_t* success;

  _RafdbService_GetLeaderId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RafdbService_GetCluserIPList_args {
 public:

  RafdbService_GetCluserIPList_args() {
  }

  virtual ~RafdbService_GetCluserIPList_args() throw() {}


  bool operator == (const RafdbService_GetCluserIPList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RafdbService_GetCluserIPList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_GetCluserIPList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_GetCluserIPList_pargs {
 public:


  virtual ~RafdbService_GetCluserIPList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_GetCluserIPList_result__isset {
  _RafdbService_GetCluserIPList_result__isset() : success(false) {}
  bool success;
} _RafdbService_GetCluserIPList_result__isset;

class RafdbService_GetCluserIPList_result {
 public:

  RafdbService_GetCluserIPList_result() : success("") {
  }

  virtual ~RafdbService_GetCluserIPList_result() throw() {}

  std::string success;

  _RafdbService_GetCluserIPList_result__isset __isset;

  bool operator == (const RafdbService_GetCluserIPList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RafdbService_GetCluserIPList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_GetCluserIPList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_GetCluserIPList_presult__isset {
  _RafdbService_GetCluserIPList_presult__isset() : success(false) {}
  bool success;
} _RafdbService_GetCluserIPList_presult__isset;

class RafdbService_GetCluserIPList_presult {
 public:


  virtual ~RafdbService_GetCluserIPList_presult() throw() {}

  std::string* success;

  _RafdbService_GetCluserIPList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RafdbService_SendVote_args__isset {
  _RafdbService_SendVote_args__isset() : message(false) {}
  bool message;
} _RafdbService_SendVote_args__isset;

class RafdbService_SendVote_args {
 public:

  RafdbService_SendVote_args() {
  }

  virtual ~RafdbService_SendVote_args() throw() {}

  rafdb::Message message;

  _RafdbService_SendVote_args__isset __isset;

  bool operator == (const RafdbService_SendVote_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SendVote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SendVote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_SendVote_pargs {
 public:


  virtual ~RafdbService_SendVote_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ReplyVote_args__isset {
  _RafdbService_ReplyVote_args__isset() : message(false) {}
  bool message;
} _RafdbService_ReplyVote_args__isset;

class RafdbService_ReplyVote_args {
 public:

  RafdbService_ReplyVote_args() {
  }

  virtual ~RafdbService_ReplyVote_args() throw() {}

  rafdb::Message message;

  _RafdbService_ReplyVote_args__isset __isset;

  bool operator == (const RafdbService_ReplyVote_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ReplyVote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ReplyVote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ReplyVote_pargs {
 public:


  virtual ~RafdbService_ReplyVote_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_SendHeartBeat_args__isset {
  _RafdbService_SendHeartBeat_args__isset() : message(false) {}
  bool message;
} _RafdbService_SendHeartBeat_args__isset;

class RafdbService_SendHeartBeat_args {
 public:

  RafdbService_SendHeartBeat_args() {
  }

  virtual ~RafdbService_SendHeartBeat_args() throw() {}

  rafdb::Message message;

  _RafdbService_SendHeartBeat_args__isset __isset;

  bool operator == (const RafdbService_SendHeartBeat_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_SendHeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_SendHeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_SendHeartBeat_pargs {
 public:


  virtual ~RafdbService_SendHeartBeat_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ReplyHeartBeat_args__isset {
  _RafdbService_ReplyHeartBeat_args__isset() : message(false) {}
  bool message;
} _RafdbService_ReplyHeartBeat_args__isset;

class RafdbService_ReplyHeartBeat_args {
 public:

  RafdbService_ReplyHeartBeat_args() {
  }

  virtual ~RafdbService_ReplyHeartBeat_args() throw() {}

  rafdb::Message message;

  _RafdbService_ReplyHeartBeat_args__isset __isset;

  bool operator == (const RafdbService_ReplyHeartBeat_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ReplyHeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ReplyHeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ReplyHeartBeat_pargs {
 public:


  virtual ~RafdbService_ReplyHeartBeat_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_QueryLeaderId_args__isset {
  _RafdbService_QueryLeaderId_args__isset() : message(false) {}
  bool message;
} _RafdbService_QueryLeaderId_args__isset;

class RafdbService_QueryLeaderId_args {
 public:

  RafdbService_QueryLeaderId_args() {
  }

  virtual ~RafdbService_QueryLeaderId_args() throw() {}

  rafdb::Message message;

  _RafdbService_QueryLeaderId_args__isset __isset;

  bool operator == (const RafdbService_QueryLeaderId_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_QueryLeaderId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_QueryLeaderId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_QueryLeaderId_pargs {
 public:


  virtual ~RafdbService_QueryLeaderId_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RafdbService_ReplyLeaderId_args__isset {
  _RafdbService_ReplyLeaderId_args__isset() : message(false) {}
  bool message;
} _RafdbService_ReplyLeaderId_args__isset;

class RafdbService_ReplyLeaderId_args {
 public:

  RafdbService_ReplyLeaderId_args() {
  }

  virtual ~RafdbService_ReplyLeaderId_args() throw() {}

  rafdb::Message message;

  _RafdbService_ReplyLeaderId_args__isset __isset;

  bool operator == (const RafdbService_ReplyLeaderId_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RafdbService_ReplyLeaderId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RafdbService_ReplyLeaderId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RafdbService_ReplyLeaderId_pargs {
 public:


  virtual ~RafdbService_ReplyLeaderId_pargs() throw() {}

  const rafdb::Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class RafdbServiceClient : virtual public RafdbServiceIf {
 public:
  RafdbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RafdbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void VseClientVersion(std::string& _return);
  void send_VseClientVersion();
  void recv_VseClientVersion(std::string& _return);
  void ClientEnumAllDbs(ResDbnameList& _return);
  void send_ClientEnumAllDbs();
  void recv_ClientEnumAllDbs(ResDbnameList& _return);
  void ClientCreateDbV2(ErrInfoThr& _return, const std::string& dbname, const std::string& fields);
  void send_ClientCreateDbV2(const std::string& dbname, const std::string& fields);
  void recv_ClientCreateDbV2(ErrInfoThr& _return);
  void ClientDeleteDb(ErrInfoThr& _return, const std::string& dbname);
  void send_ClientDeleteDb(const std::string& dbname);
  void recv_ClientDeleteDb(ErrInfoThr& _return);
  void ClientGetDbRecordCount(ResIntInfo& _return, const std::string& dbname);
  void send_ClientGetDbRecordCount(const std::string& dbname);
  void recv_ClientGetDbRecordCount(ResIntInfo& _return);
  void ClientPushRecordV2(ResIntInfo& _return, const std::string& dbname, const std::string& fields, const std::string& values);
  void send_ClientPushRecordV2(const std::string& dbname, const std::string& fields, const std::string& values);
  void recv_ClientPushRecordV2(ResIntInfo& _return);
  void ClientRetrieveRecordsV2(RetriveRecords& _return, const std::string& dbname, const std::string& fields, const std::string& wherestmt, const double min_sim, const int64_t max_rec);
  void send_ClientRetrieveRecordsV2(const std::string& dbname, const std::string& fields, const std::string& wherestmt, const double min_sim, const int64_t max_rec);
  void recv_ClientRetrieveRecordsV2(RetriveRecords& _return);
  void ClientDeleteRecord(ErrInfoThr& _return, const std::string& dbname, const int64_t index);
  void send_ClientDeleteRecord(const std::string& dbname, const int64_t index);
  void recv_ClientDeleteRecord(ErrInfoThr& _return);
  void ClientDeleteRecordWs(ErrInfoThr& _return, const std::string& dbname, const std::string& wherestmt);
  void send_ClientDeleteRecordWs(const std::string& dbname, const std::string& wherestmt);
  void recv_ClientDeleteRecordWs(ErrInfoThr& _return);
  void ClientDbScanRepair(ResIntInfo& _return, const std::string& dbname);
  void send_ClientDbScanRepair(const std::string& dbname);
  void recv_ClientDbScanRepair(ResIntInfo& _return);
  void ClientEnumDbColumns(ResIntInfo& _return, const std::string& dbname);
  void send_ClientEnumDbColumns(const std::string& dbname);
  void recv_ClientEnumDbColumns(ResIntInfo& _return);
  bool IsHealthy();
  void send_IsHealthy();
  bool recv_IsHealthy();
  bool IsLeader();
  void send_IsLeader();
  bool recv_IsLeader();
  int32_t GetLeaderId();
  void send_GetLeaderId();
  int32_t recv_GetLeaderId();
  void GetCluserIPList(std::string& _return);
  void send_GetCluserIPList();
  void recv_GetCluserIPList(std::string& _return);
  void SendVote(const rafdb::Message& message);
  void send_SendVote(const rafdb::Message& message);
  void ReplyVote(const rafdb::Message& message);
  void send_ReplyVote(const rafdb::Message& message);
  void SendHeartBeat(const rafdb::Message& message);
  void send_SendHeartBeat(const rafdb::Message& message);
  void ReplyHeartBeat(const rafdb::Message& message);
  void send_ReplyHeartBeat(const rafdb::Message& message);
  void QueryLeaderId(const rafdb::Message& message);
  void send_QueryLeaderId(const rafdb::Message& message);
  void ReplyLeaderId(const rafdb::Message& message);
  void send_ReplyLeaderId(const rafdb::Message& message);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RafdbServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<RafdbServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (RafdbServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_VseClientVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientEnumAllDbs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientCreateDbV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientDeleteDb(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientGetDbRecordCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientPushRecordV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientRetrieveRecordsV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientDeleteRecord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientDeleteRecordWs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientDbScanRepair(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ClientEnumDbColumns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_IsHealthy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_IsLeader(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetLeaderId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetCluserIPList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_SendVote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ReplyVote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_SendHeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ReplyHeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_QueryLeaderId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_ReplyLeaderId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  RafdbServiceProcessor(boost::shared_ptr<RafdbServiceIf> iface) :
    iface_(iface) {
    processMap_["VseClientVersion"] = &RafdbServiceProcessor::process_VseClientVersion;
    processMap_["ClientEnumAllDbs"] = &RafdbServiceProcessor::process_ClientEnumAllDbs;
    processMap_["ClientCreateDbV2"] = &RafdbServiceProcessor::process_ClientCreateDbV2;
    processMap_["ClientDeleteDb"] = &RafdbServiceProcessor::process_ClientDeleteDb;
    processMap_["ClientGetDbRecordCount"] = &RafdbServiceProcessor::process_ClientGetDbRecordCount;
    processMap_["ClientPushRecordV2"] = &RafdbServiceProcessor::process_ClientPushRecordV2;
    processMap_["ClientRetrieveRecordsV2"] = &RafdbServiceProcessor::process_ClientRetrieveRecordsV2;
    processMap_["ClientDeleteRecord"] = &RafdbServiceProcessor::process_ClientDeleteRecord;
    processMap_["ClientDeleteRecordWs"] = &RafdbServiceProcessor::process_ClientDeleteRecordWs;
    processMap_["ClientDbScanRepair"] = &RafdbServiceProcessor::process_ClientDbScanRepair;
    processMap_["ClientEnumDbColumns"] = &RafdbServiceProcessor::process_ClientEnumDbColumns;
    processMap_["IsHealthy"] = &RafdbServiceProcessor::process_IsHealthy;
    processMap_["IsLeader"] = &RafdbServiceProcessor::process_IsLeader;
    processMap_["GetLeaderId"] = &RafdbServiceProcessor::process_GetLeaderId;
    processMap_["GetCluserIPList"] = &RafdbServiceProcessor::process_GetCluserIPList;
    processMap_["SendVote"] = &RafdbServiceProcessor::process_SendVote;
    processMap_["ReplyVote"] = &RafdbServiceProcessor::process_ReplyVote;
    processMap_["SendHeartBeat"] = &RafdbServiceProcessor::process_SendHeartBeat;
    processMap_["ReplyHeartBeat"] = &RafdbServiceProcessor::process_ReplyHeartBeat;
    processMap_["QueryLeaderId"] = &RafdbServiceProcessor::process_QueryLeaderId;
    processMap_["ReplyLeaderId"] = &RafdbServiceProcessor::process_ReplyLeaderId;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~RafdbServiceProcessor() {}
};

class RafdbServiceMultiface : virtual public RafdbServiceIf {
 public:
  RafdbServiceMultiface(std::vector<boost::shared_ptr<RafdbServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RafdbServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RafdbServiceIf> > ifaces_;
  RafdbServiceMultiface() {}
  void add(boost::shared_ptr<RafdbServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void VseClientVersion(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->VseClientVersion(_return);
        return;
      } else {
        ifaces_[i]->VseClientVersion(_return);
      }
    }
  }

  void ClientEnumAllDbs(ResDbnameList& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientEnumAllDbs(_return);
        return;
      } else {
        ifaces_[i]->ClientEnumAllDbs(_return);
      }
    }
  }

  void ClientCreateDbV2(ErrInfoThr& _return, const std::string& dbname, const std::string& fields) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientCreateDbV2(_return, dbname, fields);
        return;
      } else {
        ifaces_[i]->ClientCreateDbV2(_return, dbname, fields);
      }
    }
  }

  void ClientDeleteDb(ErrInfoThr& _return, const std::string& dbname) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientDeleteDb(_return, dbname);
        return;
      } else {
        ifaces_[i]->ClientDeleteDb(_return, dbname);
      }
    }
  }

  void ClientGetDbRecordCount(ResIntInfo& _return, const std::string& dbname) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientGetDbRecordCount(_return, dbname);
        return;
      } else {
        ifaces_[i]->ClientGetDbRecordCount(_return, dbname);
      }
    }
  }

  void ClientPushRecordV2(ResIntInfo& _return, const std::string& dbname, const std::string& fields, const std::string& values) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientPushRecordV2(_return, dbname, fields, values);
        return;
      } else {
        ifaces_[i]->ClientPushRecordV2(_return, dbname, fields, values);
      }
    }
  }

  void ClientRetrieveRecordsV2(RetriveRecords& _return, const std::string& dbname, const std::string& fields, const std::string& wherestmt, const double min_sim, const int64_t max_rec) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientRetrieveRecordsV2(_return, dbname, fields, wherestmt, min_sim, max_rec);
        return;
      } else {
        ifaces_[i]->ClientRetrieveRecordsV2(_return, dbname, fields, wherestmt, min_sim, max_rec);
      }
    }
  }

  void ClientDeleteRecord(ErrInfoThr& _return, const std::string& dbname, const int64_t index) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientDeleteRecord(_return, dbname, index);
        return;
      } else {
        ifaces_[i]->ClientDeleteRecord(_return, dbname, index);
      }
    }
  }

  void ClientDeleteRecordWs(ErrInfoThr& _return, const std::string& dbname, const std::string& wherestmt) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientDeleteRecordWs(_return, dbname, wherestmt);
        return;
      } else {
        ifaces_[i]->ClientDeleteRecordWs(_return, dbname, wherestmt);
      }
    }
  }

  void ClientDbScanRepair(ResIntInfo& _return, const std::string& dbname) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientDbScanRepair(_return, dbname);
        return;
      } else {
        ifaces_[i]->ClientDbScanRepair(_return, dbname);
      }
    }
  }

  void ClientEnumDbColumns(ResIntInfo& _return, const std::string& dbname) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ClientEnumDbColumns(_return, dbname);
        return;
      } else {
        ifaces_[i]->ClientEnumDbColumns(_return, dbname);
      }
    }
  }

  bool IsHealthy() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsHealthy();
      } else {
        ifaces_[i]->IsHealthy();
      }
    }
  }

  bool IsLeader() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsLeader();
      } else {
        ifaces_[i]->IsLeader();
      }
    }
  }

  int32_t GetLeaderId() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetLeaderId();
      } else {
        ifaces_[i]->GetLeaderId();
      }
    }
  }

  void GetCluserIPList(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetCluserIPList(_return);
        return;
      } else {
        ifaces_[i]->GetCluserIPList(_return);
      }
    }
  }

  void SendVote(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->SendVote(message);
    }
  }

  void ReplyVote(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ReplyVote(message);
    }
  }

  void SendHeartBeat(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->SendHeartBeat(message);
    }
  }

  void ReplyHeartBeat(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ReplyHeartBeat(message);
    }
  }

  void QueryLeaderId(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->QueryLeaderId(message);
    }
  }

  void ReplyLeaderId(const rafdb::Message& message) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ReplyLeaderId(message);
    }
  }

};

} // namespace

#endif
