/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "accord_types.h"

namespace rafdb {

const char* Message::ascii_fingerprint = "74FC576BE6E579EAF992564A56E6242B";
const uint8_t Message::binary_fingerprint[16] = {0x74,0xFC,0x57,0x6B,0xE6,0xE5,0x79,0xEA,0xF9,0x92,0x56,0x4A,0x56,0xE6,0x24,0x2B};

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term_id);
          this->__isset.term_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->candidate_id);
          this->__isset.candidate_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->server_id);
          this->__isset.server_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leader_id);
          this->__isset.leader_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->self_healthy);
          this->__isset.self_healthy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->granted);
          this->__isset.granted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->message_type = (MessageType::type)ecast0;
          this->__isset.message_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Message");
  xfer += oprot->writeFieldBegin("term_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->term_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("candidate_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->candidate_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("server_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->server_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("leader_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->leader_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("self_healthy", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->self_healthy);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("granted", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->granted);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message_type", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->message_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
